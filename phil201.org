#+TITLE: PHIL 201 Notes
#+AUTHOR: Stephen Brennan
#+SETUPFILE: config.setup

* 2015-08-24 Monday

  Context:

  - Socrates - dies 399 BC
  - Plato - writes 15 years after that
  - Aristotle - even younger than that

  What did Socrates write?  We know because of comedies written about him, and
  ideas attributed here.  He would say he couldn't teach you anything, only talk
  about stuff.  He talked about the "good life, not a teacher."  He was the
  enemy of the "sophist," who takes money for teaching.

  What did Plato do?  Dialogues about Socrates, and other stuff.  People copied
  his works for 1500 years, so we have crystal clear knowledge of what he did.
  He also ran the Academy in Athens (where the "right people"--young men--could
  get together and learn).  He coined the term Academy in Greek.  He wrote about
  "The Good".

  Aristotle went to Plato's Academy.  He created Formal Logic, all by himself.
  Here's some of his stuff.

  - All Greeks are mortal.  Socrates is a greek.  Therefore, Socrates is mortal.
  - Some snakes are poisonous.  There's a snake right next to your shoe.
    Therefore, you should move away slowly.

  Differences between the two:

  - The first is a "Universal" and the second is a "Particular" (all/some).
  - The first is "deductively valid".  That means that every argument of this
    form is valid, so long as each of the propositions are true.

  Modern logic came about because of von Neuman, Alonzo Church, and Alan Turing.
  The same guys who created computers.

  This class is about new ways of organizing arguments, not new and clever
  arguments.  We will also learn how to evaluate arguments:

  - Soundness: no false positives.  A sound method could be as simple as never
    answering.
  - Completeness: all correct positives.  A complete method would always say
    yes.
  - Effective: always gives you an answer.

  This logic is:

  1. Utterly precise
  2. Artificial
  3. Simple (but not necessarily easy)
  4. Limited

  The textbook: "The Logic Book" by Merrie Bergman.
* 2015-08-26 Wednesday

** Chapter 1 - Deductive Logic

   "There is no inductive logic."

   A *sentence* is a statement which is True or False.  What is /not/ a sentence
   in our terminology?
   - Interrogatives (questions)
   - Imperatives (commands)
   - (/Future tense, predictions/) - in logic class, these are true or false,
     but there could be lots of lively debate.  Apparently Aristotle wrote about
     this and our instructor says it is a "long and confusing" section.
   - Opinionated statements (e.g. "France is a beautiful country.").  For logic
     textbook purposes, we can treet these as declarative sentences, but we
     don't typically think of them that way in the real world.

   An *argument* is a list of sentences, one of which is called a *conclusion*,
   the others are called *premises*.  There can be discussion about how many
   sentences are required, but really you only need one to have an argument.
   Additionally, the book says in older editions that the premises should be
   "intended to support the conclusion."  But that really shouldn't matter.
   This is missing several parts from normal definitions of arguments:
   - Opposing viewpoints.
   - Reasoning (why a premise supports a conclusion).

   A (Deductively) *valid* argument is an argument where there is no way for the
   premises to be True while the conclusion is False.  Correspondingly, an
   *invalid* argument is one where there is some way for the premises to be True
   and the conclusion False (which is called a *counterexmple*, CE).

   Example Arguments:

   - Today is Wednesday and is not Wednesday.  \therefore, the temperature is 80\deg{}F.
     - Valid.  The premise is never true.  There is no way for the premise to be
       true while the conclusion is false.  *An argument with inconsistent
       premises is trivially valid.*
   - Columbus is capital of Ohio.  \therefore Columbus is in Ohio.
     - Doesn't matter.  This is where the "no way" becomes vague.

* 2015-08-28 Friday

  Sentences $p$ and $q$ are *logically equivalent* if there is no way to make
  one True and the other False.

  EG:
  - It is either not Wednesday or not raining.  (or both)
  - It is not Wednesday and raining.
  - (FYI, DeMorgan's Law)

  Quiz on Wednesday.  What will be on the quiz?  Definitions mostly.
  Definitions we covered up till the quiz.  Which may include chapter 2.

  A list of sentences is *consistent* if there is Some Way for all to be True at
  once.  Satisfiability!!  EG:

  - If today is Wednesday, then it's not raining.
  - Today is Wednesday.
  - It is raining.

  No matter how you did it, you couldn't make all of these true.  So this list
  of sentences is not consistent.

  P_1, P_2, ..., P_n \therefore C is Logically Valid iff the list {P_1, P_2, ..., P_n,
  \not{}C} is inconsistent.

** Chapter 2

   An *atomic* sentence is a sentence with no smaller sentence as part.  A
   *connective* is a word (or words) that applies to one or more sentences to
   form a sentence.  EG:
   - "not" - applies to any sentence, and creates a new sentence.
   - "and" - can go between sentences, and creates a new one
   - "don't say" - is NOT a connective, because it forms an imperative, not a
     sentence.
   - "I don't believe" - is a connective.

   A *Truth Functional Connective* is a connective such that the truth value of
   the sentence it forms is wholly determined by the truth value of the parts.

   - NOT + (Bornite is a Cu ore): this is TFC, because Not always reverses the
     truth value.
   - My Brother Knows + (Bornite is a Cu ore): this is a connective, but not
     TFC, because the sentence alone doesn't tell you whether the whole thing is
     true.

   In other words, TFCs are connectives that have truth tables!!!  EG, for not:

   | P | \not{}P |
   | T | F  |
   | F | T  |
* 2015-08-31 Monday

  - A = it is raining
  - B = it is wednesday
  - \not{}B = not - it is raining

  | A | B | \not{}A | \not\not{}A | A\land{}B | A\lor{}B | A\to{}B | A\equiv{}B |
  | T | T | F  | T   | T   | T   | T   | T   |
  | T | F | F  | T   | F   | T   | F   | F   |
  | F | T | T  | F   | F   | T   | T   | F   |
  | F | F | T  | F   | F   | F   | T   | T   |

  In "King George's English", you may repeat "not" several times to emphasize
  just how much "not" you mean.  EG "I will not not not not not go to class!".
  Also, in English, "or" can mean "one or the other, but not both" (exclusive
  or).  It can also mean "one or the other or both" (inclusive or).  The only
  way you can tell is by context.  In logic, we define or to be inclusive, when
  we use the \lor symbol.

  For if/then, we say A \to B, where A is the *antecedent*, and B is the
  *consequent*.  If has a lot of meanings in English, but in logic, we use
  implication.  It's like a promise.  When you tell your friend "if I finish the
  paper, then I'll come over to your place", the only thing that would offend
  them is if you finished the paper, but did not come over.  Any other situation
  is pretty much fine.

  He says to use plus for exclusive or (if you ever use it), but I prefer \oplus.
  And we don't really use exclusive or.

  - Tomorrow will Rain unless it Snows
    - This is R \lor S.
    - Unless \equiv Or

* 2015-09-02 Wednesday

  Quiz.

* 2015-09-04 Friday

  No class, professor absent.

* 2015-09-07 Monday

  No class, labor day.

* 2015-09-09 Wednesday

  I skipped.  We went over the quiz.

* 2015-09-11 Friday

  John will sing and Don dance unless Alice reads.
  - Sentential logic: J & D \lor A.  But which?
    - (J & D) \lor A
    - J & (D \lor A)
    - They are both valid, and different.
    - To see this, let J=F, D=T, A=T.  The first one is True, and the second is
      False.
    - Now we're getting side tracked on unless, vs logical implication, etc.
    - Unless = inclusive or.  We get it.  Really.  Please stop.
  - You need to rely on the grammar of the sentence.  "Don dance" depends on
    "John will sing" for a verb, so you would expect that those two are closer
    than the Alice part.
  - In general, showing your work (e.g. by parenthesizing the original
    sentence), leads to partial credit, but more commonly, it just leads to
    getting the answer correct more frequently.

  If I buy Apples then if I get Bananas I'll get Cherries.
  - A \to (B \to C)
  - Or is it (A \to B) \to C?
  - You can tell that they're different because the first is T when A=T, and you
    can make the second false by then making B=T and C=F.
  - It's easy to resolve this one.

  If I buy Apples and Bananas, then I'll buy Cherries.
  - (A & B) \to C

  Are those last two sentences the same?
  - ~(A & B) \lor C
  - ~A \lor ~B \lor C
  - ~A \lor (B \to C)
  - A \to (B \to C)
  - Yaas!
  - Or you could do

  Al dislikes bananas, passionately.  Al detests bananas.
  - Are they equivalent?
  - Ch. 1: maaaybe?
  - Ch. 2: no.  A \equiv B!!
* 2015-09-13 Monday

  I missed.

* 2015-09-15 Wednesday

  ~(A&B), ~(B&C), \therefore ~A \to C

  Not a valid argument.  A, B, and C could all be false.  Then, you have both
  premises true, but the conclusion is false.

  They're talking about a "tree" method.  I missed that.  So he's going to do a
  tree here.  I'll take notes.

  Set of sentences (not argument, we negated conclusion).
  - ~(A&B)
  - ~(B&C)
  - ~(~A\to{}C)

  Now we try to satisfy all 3 with an tree.
  - ~A will make ~(A&B) true
    - ~B will make ~(B&C) true
      - ~A and ~C will make ~(~A\to{}C) true
    - ~C will make ~(B&C) true
      - ~A and ~C will make ~(~A\to{}C) true
  - ~B will make ~(A&B) true
    - No need to go further.

  We can see that in the first branch, we have ~A, ~B, ~C as a way to make all
  sentences true.  Which means it's a counterexample.  Yay.

  (A \to (B & C)) \to (A \to C)

  Is it true?

  We can try to make the opposite true.

  ~((A \to (B & C)) \to (A \to C))

  - To make the not true, we make the inside false.
    - To make the inside false, we make the antecedent true and the consequent
      false.  That is, (A \to (B & C)) and (A \to C).
      - Not sure where we go from here.
* 2015-09-25 Friday

  There are logic sentences on the board.

  - \((A \lor B) \to C\)
  - \(D \to E\)
  - \(E \to B\)
  - \therefore ~C \to ~D (negate to ~(~C\to~D))

  - (A \lor B) \to C
    - ~(A \lor B)
      - ~A, ~B.  Now, D \to E
        - ~D: E \to B
          - ~E : ~(~C \to ~D)
            - ~C, D: FALSE
          - B : ~(~C \to ~D)
            - ~C, D: FALSE
        - E: E \to B
          - ~E: FALSE
          - B: FALSE
    - C: Now, D \to E
      - more stuff

  - Should start with the tree that doesn't branch.
  - Then go to sentences that look like they'll have conflicts.

  - A \to (B \lor C)
  - B \to (D & E)
  - ~(A \to D)

  - A, ~D: go to A \to (B \lor C)
    - ~A FALSE
    - B \lor C
      - B: B \to (D & E)
        - ~B FALSE
        - D & E
          - D, E: FALSE (~D)
      - C: B \to (D & E)
        - ~B: TRUE
        - D & E

  Set A, ~B, C, ~D

  A \equiv (B \lor C)
  C \equiv (A & ~B)

  - A, (B \lor C)
    - B: C \equiv (A & ~B)
      - C, (A & ~B)
        - A, ~B: FALSE
      - ~C, ~(A & ~B)
        - ~A, B: FALSE
    - C:
      - C, (A & ~B)
        - A, ~B: TRUE

  Set A, C, ~B
* 2015-10-12 Monday

  These aren't actually my notes for today's class.  There's a quiz in class
  today, so I'm using today's notes as a place to take notes on the content of
  the past week.  We have three major topics: soundness, completeness, and
  effectiveness.  Particularly, we've been talking about these properties of the
  Tree Method for Validity in Sentential Logic.

** Soundness

   The soundness property of any method means that it will never produce false
   positives.  If a method says "this argument is valid", then the argument
   /must/ be valid.  The simplest sound test is to say no argument is valid.  In
   Machine Learning terms, a sound argument (classifier) is one that produces no
   false positives, and thus has perfect Precision.

   More formally, you can state soundness as "if the method says an argument is
   valid, then the argument is valid".  We can prove this by proving the
   contrapositive, that is: "if the argument is invalid, then the method will
   not say it is valid".

   - To say an argument is invalid is to say that there is a counterexample
     (i.e. a row in a truth table that makes the whole list true).
   - First, we prove the lemma: "if a row of the truth table makes a sentence
     valid, then that same row will make at least one of the branches true."
     - For atomic or negated atomics, there is no branch.
     - For conjunctions \(A \land B\), the only row that could make the conjunction
       true is assigning True to both $A$ and $B$.  The tree rule will create
       one branch with $A$ and $B$ on it.  The only table row that makes \(A \land
       B\) true also makes both $A$ and $B$ true in the subsequent rule.
     - For negated conjunctions \(~(P \land Q)\), The rule will expand to two trees:
       one that is $~P$, and the other that is $~Q$.  The rows that could make
       \(~(P \land Q)\) true are:
       - $~P$, $~Q$: this makes both $~P$ and $~Q$ branches true.
       - $~P$, $Q$: this makes the $~P$ branch true
       - $P$, $~Q$: this makes the $~Q$ branch true.
     - For \(P \lor Q\), the rule will expand to two branches: one with $P$, the
       other with $Q$.  The truth table rules that make \(P \lor Q\) true are:
       - $P$, $Q$: this makes both branches true
       - $P$, $~Q$: this makes the $P$ branch true
       - $~P$, $Q$: this makes the $Q$ branch true
     We can keep doing this for every tree rule (which kinda stinks, but we'll
     have to know how to do this for any tree rule he gives us).
   - The second part of the proof is pretty simple.  You need to prove the
     statement that "if some row of the truth table makes all the sentences on a
     current branch true, then applying any truth tree rule to a sentence on
     that branch will result in at least one branch remaining open":
     - This is a direct result of the previous lemma.
     - Choose any sentence and any rule, and apply the rule to the sentence.
     - If the rule makes no branches at all, then the subtree will be a tree
       with one less sentence, and the same branch still makes all those
       sentences true.  So the branch is still open.
     - If the rule makes any branches, then applying the above lemma, since
       there is truth tree row that makes this sentence true, that row also
       makes at least one of the child branches true.  That row also makes the
       remaining sentences in the tree true, so that (those) child branch(es)
       remain open.

** Completeness

   As soundness is the property of "no false positives", completeness is the
   property of "no false negatives".  This means perfect Recall.  More formally,
   if an argument is valid, then the method will say it is valid (i.e. the truth
   tree will close).  To prove this, we prove the contrapositive: "if the method
   does not say it is valid, then the argument is invalid".  We'll rely on
   effectiveness in this proof, but I guess the proof of effectiveness isn't
   content for this quiz.

   Since every tree will eventually complete (in SL...), all we need to do is
   say that every open branch on a completed truth tree corresponds to a (not
   necessarily unique) counterexample.

   To show this, we consider a finished open branch on a tree.  Go up it,
   assigning T to each atomic sentence you see.  Once you're done, assign F to
   every atomic that you didn't see (just so that you have a decision made for
   every variable).

   The first thing to say is that you are guaranteed that you will get a
   consistent variable assignment.  This is because if you got a contradictory
   variable assignment, this branch would be closed (that's the condition for
   closing a branch!).

   The second thing is to show that this variable assignment makes every
   sentence in the tree True.  We do this as we go up the tree, for each kind of
   rule.  This is actually a bit inductive - the first case is the base case,
   and the following cases seem to require the inductive hypothesis.

   - An atomic/negated atomic sentence can't be False, because we are assigning
     it to true.
   - Conjunctions \(P \land Q\) can't be the first sentence to be made false, since
     the tree below has made both P and Q to be true (the inductive
     hypothesis).
   - Negated conjunctions \(~(P \land Q)\) can't be the first sentence to be made
     false, since below it either $~P$ or $~Q$ was true (it could be both, but
     we only know that one of them is true).  If we've made one of those true,
     then we've made this sentence true as well.
   - For \(P \lor Q\), they can't be the first sentence made false.  This is
     because below, we've either got $P$ or $Q$ to be true.  It could be both,
     but we know that at least one of them is true).  By the definition of $\lor$,
     this means that \(P \lor Q\) must also be true.
   - This continues for every rule.

   This tells you that every open branch must produce a variable assignment, and
   since all the sentences are true, thet variable assignment is a
   counterexample.  Therefore, whenever the tree finishes with an open branch,
   there is a counterexample, and so there are no false negatives.

** Effectiveness

   It seems silly that this proof won't be quizzed on, but whatever.
   Essentially, you look at any collection of sentences and see that you can
   place an upper bound on the number of tree levels that are necessary to rid
   it of all its binary connectives and negations.  You just need to show that
   for each binary connective tree rule, you get on the next level one less
   binary connective, and at most one more negation.

** Condensed Concepts

   *Soundness:*
   - "No false positives"
   - If Tree says it's valid, then argument is valid.
   - If invalid, then tree says invalid.
   - If counterexample, then tree finds it.
   - If a row makes all sentences true, then there will be an open branch.
   - Must show: for each rule, every row that makes it true makes one of the
     children true.

   *Completeness:*
   - "Every correct positive."
     - If argument is valid, then tree says it's valid.
   - "No false negatives."
     - If tree says it's invalid, then argument is invalid.
   - Both of the above "statements" followed by formal statements are
     equivalent; we use the second.
   - Every open tree branch corresponds to a counterexample.
   - Must show: for each rule, if one of its children is true, then the parent
     is also true.
* 2015-11-09 Monday

  Review day before FOL quiz!  Let's get ready to rumble.

  A counter example in FOL is a universe of discourse, and probably some other.

  Here is a premise and conclusion:
  - \(\forall x \exists y Wxy\)
  - \(\exists x \forall y Wyx\)

  Or the list:
  - \(\forall x \exists y Wxy\)
  - \(~\exists x \forall y Wyx\), which is \(\forall x ~\forall y Wyx\).

  To do the tree:
  1. Since there's no way to get a constant, create $a$ substituted for $x$.
  2. Now we have:
     - \(\exists y Way\)
     - \(~\forall y Wya\)
  3. Now, we create $b$ substituted for $y$ in the first one:
     - \(Wab\)
     - \(\exists y ~Wya\)

  I got a bit lost in this tree stuff.  But here is the counter example, in a
  way that I believe he'd like it on the quiz:

  - \(UD = \{0,1\}\)
    - $a$ is a name for 0
    - $b$ is a name for 1
  - \(W: \{<0,1>, <1,0>\}\)

  Or you could also use \(W: \{<0,0>, <1,1>\}\).

  Translations?

  "Nobody wrote to everyone taller than them."

  - ~ \exists x (\forall y (Tyx \to Wxy))
  - Here, Tyx means y is taller than x.
  - And, Wxy means x wrote to y.
  - It appears that he'd like us to go quantifier by quantifier, substituting a
    new sentence inside so that we can show how we went.  For the above:
  - Nobody wrote to everyone taller than them.
  - ~ \exists x (x wrote to everyone taller than them)
  - ~ \exists x (\forall y (if y is taller than x, then x wrote to y))
  - ~ \exists x (\forall y (Tyx \to Wxy))
  - This is a pretty darn solid way to do it.
  - Also, liberally apply parentheses.

  Sally never writes to me.  ~Wsm

  Sally never writes to anyone: ~ \exists x Wsx.  Or just \forall x ~Wsx

  Need to translate and do trees.  The FOL trees will a bit difficult to learn
  in time.

  List of rules:
  - Never work inside a sentence when doing a tree.
  - Never create a constant for a universal (unless there's *no other place* to
    get one).
* 2015-11-11 Wednesday

  The quiz is not today.  Go figure.  It was postponed due to a study group of 8
  people who said they weren't ready.  Interesting.  So, we'll do some more
  examples.  Maybe I'll get the FOL tree algorithm down.

  Don't forget universe of discourse.  It's important for statements to have
  meaning when you interpret them.  It's less important for logic class, but
  still important to have in mind.

  Vocab:
  - Gx: x is greek
  - Px: x is a poet
  - Mx: x is mortal

  Argument:
  - All Greeks are Poets.
  - Some Poets are Immortal.
  - Some Greeks are immortal.

  Translation:
  - \forall x (Gx \to Px)
  - \exists x (Px \land ~Mx)
  - \exists x (Gx \land ~Mx)

  Now the discussion is getting lost in the silly, unimportant details of
  translation.

  Tree:
  1. Start with the second sentence.  Why?  Because that will give us a
     constant.  We define $a$ such that \(Pa \land ~Ma\).
  2. Go to the second sentence.  Now, we apply the universal to $a$, and get
     \(Ga \to Pa\).
  3. Go to the third sentence.  Do the "rotation', and we get a universal, so we
     can apply it to $a$: \(~(Ga \land ~Ma)\).
  4. Now we have checked off all our existentials and applied all our
     universals, so we can start doing a SL tree!
     - We have Pa, ~Ma (from the first sentence)
       - ~Ga (from third sentence).  If we did the second sentence, we would see
         that this branch is left open, so we have a contradiction.
       - ~~Ma (from third sentence) contradiction, so this closes.

  The contradiction:
  - UD = {a}
  - P = {a}
  - G = \empty
  - M = \empty

  Notes on how FOL trees work:
  - You close a branch when you encounter anything and its negation (i.e. a
    contradiction).
  - You know you have a counter example when everything that can be checked off
    (sentences and existentials) has been, and all universals have been applied
    to all constants, and there are no contradictions.
  - You don't check off universals.  You simply mark the substitutions next to
    it.
  - You do check off existentials, once you have created a constant for them.
