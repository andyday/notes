#+TITLE: EECS 433 Notes
#+AUTHOR: Stephen Brennan
#+SETUPFILE: config.setup

* 2016-08-29 Monday

** Course Logistics

- Office hours: M-W 1:30-2:30 PM, Olin 511
- TA: George Hodulik: 1:30-2:30 PM, Olin 503
- \exists a Blackboard site
- Grading:
  - Midterm - 30%
  - Project - 35%
  - Quizzes - 30%
  - Participation - 5%
- Dates:
  - Midterm: Wed, Oct 19
  - Project Proposal: Oct 5
  - Project Progress Report: Nov 2
  - Project Progress Presentation: Nov 7, 9
  - Final Project Reports: Dec 8
  - Project Presentations: Last week of class (Dec 5, 7)
- Projects are in group.
- Textbooks:
  - Database Systems: The Complete Book (Meral likes this best)
  - Database System Concepts / other undergrad textbook acceptable
  - Papers
- Topics:
  - Basic RA, SQL, relational query optimization (undegrad)
  - Object-Oriented Databases
  - Semistructured Data, XML, XPath, XQuery (odd)
  - RDF, SparQL
  - Parallel & Distributed Databases
  - Information Integration, data warehouses, OLAP
  - No-SQL, Graph databases as time allows

** Review of Undergraduate Concepts

- Database - stored, structured data modeling the real world. Usually with
  entities and relationships.
- DBMS - software designed to maintain/manage the database
- Data Models for Structuring Data
  - Entity-Relationship Model (general first step)
  - Hierarchical Data Model (legacy)
  - Network Data Model (legacy)
  - Relational Data Model (major use)
  - Object-Oriented Data Model (specialized use) - usually in-memory only
  - Object-Relational Data Model (more common)
  - XML
  - RDF
- Query languages:
  - Symbolic-Logic Based:
    - Relational Calculus: 1st-order predicate calculus
    - Datalog: high-order predicate calculus (recursion!)
    - Dedalus (datalog w/ aggregation functions)
  - Algebra-based:
    - Relational Algebra
    - Object-Algebra (relational algebra plus object manipulation)
  - SQL: "industry standard", sometimes horrifying, Meral would say "a mess".
    Basics are important, and most extensions are imported from the other query
    languages and their ideas.
  - XPATH, XQUERY (borrows from SQL and uses XPATH)
  - SPARQL - querying for RDF
  - Graphical query languages
- Database Design Theory
  - Restructuring the relations at design time
  - Has bad reputation, but extensive theory

*** Data Models, DBMS

- *data model* - collection of concepts for describing data
- *schema* - a description of a particular collection of data, using a data
  model
- DDL/DML
- Levels of abstraction:
  - *views* - how the user sees the data. many of these
  - *conceptual schema* - defines the logical structure of the data
  - *physical schema* - how the data is stored
- Independence:
  - *logical data independence* - application protected from changes in
    /logical/ structure of data (new columns, etc). Limited benefits only.
  - *physical data independence* - application protected from the way the data
    is stored. DBMS gives big benefits here.
- Concurrency control:
  - Allow interleaving of many different users' actions, giving the impression
    of a single-user system
  - Interleaving can lead to inconsistency; must control that
  - *transaction* - atomic sequence of actions
  - Scheduling transactions {T_1, T_2, \dots, T_n} concurrently requires the DBMS to
    ensure that the concurrent execution is equivalent to some /serial/
    execution.
  - *2PL Locking* - transaction must request a lock before reading/writing an
    objects, and release when finished
    - Granularity: row?, column?, table?, file?
    - deadlocks? (may not be a problem)
- ACID
  - Atomicity
    - keep a /log/ of all actions carried out while executing
    - on startup, look for incomplete (crashed) transactions and roll back
  - Consistency
  - Isolation
  - Durability

*** Relational Model

Why know?  Foundation of others!

- *relational database* - a set of relations
- *relation*
  - *instance* - a table with rows, columns
    - /cardinality/ - number of rows
    - /degree/ - number of columns
  - *schema* - description of a relation

SQL basics - CREATE TABLE, INSERT, etc.

Integrity constraints:
- conditions that must be true for all instances of a relation
- specified on schema definition, verified on modification of data
- e.g. NOT NULL, key constraints, uniqueness,
- *primary key constraints* (these apply to sets of attributes)
  - (1) no duplicates: no two tuples have the same values in all attributes
  - (2) nonredundancy: property (1) is not true for any subset (otherwise,
    "superkey")
  - all sets of attributes satisfying both are candidate keys, only one is
    chosen for primary key.
  - Specify candidate key in SQL with UNIQUE, primary with PRIMARY
  - Specify that you want an index built with KEY

* 2016-08-31 Wednesday

From last time: integrity constraints:
- Primary key constraints, uniqueness

** Relational Model
*** Foreign Key Constraints

*foreign key* - fields in one relation referring to a tuple in another
relation.  Like a "logical pointer".

Must have /referential integrity/, which means that when a foreign key refers to
a tuple in another relation, that tuple should exist in the other relation.

How to enforce:
- Imagine relations "Student" and "Enrolled", where the attribute =sid= of
  Enrolled is a foreign key referring to Student.
- On insertion of an Enrolled tuple where =sid= refers to a non-existing
  Student, /reject/ that insertion.
- On deletion of a Student where a tuple in Enrolled refers to it:
  - Reject the deletion until the Enrolled tuple is deleted
  - "Cascade" the deletion, removing all tuples in other relations (like
    Enrolled) that refer to it.
  - Replace all instances of =sid= with NULL in referring tuples.

*** Relational Query Languages

Advantage of relational model is that it can be intuitively queried.
- Languages can allow extensive reordering of operations so long as the result
  is semantically the same.

*SQL* woo

Semantics of SQL Query:
1. FROM clause: compute the cross product of the relations queried
2. WHERE clause: filter these tuples by a condition
3. SELECT clause: output only certain attributes of a tuple

*** Summary

- tabular representation
- relationships between tuples
- integrity constraints keep data "nice"
- queried easily thanks to SQL

** Formal Relational Query Languages

There are two query languages which form the theoretical basis of SQL:
- Relational Algebra (the operational language)
- Relational Calculus (the semantic language)

*** Relational Algebra

What is an algebra?
- Mathematical system consisting of
  - /operands/ - variables or values from which new values can be produced. In
    relational algebra, operands are relations or variables representing them.
  - /operators/ - operations that can be performed on operands. In RA, these are
    the common database operations performed on relations (see below).

Operators:
- Union, Intersection, Difference
  - Have their usual meaning, but must relations must have same schema
- Selection: picking certain rows
  - \(R_1 = \sigma_C(R_2)\) - select tuples from R_2 according to condition C, assign
    them to R_1.
- Projection: picking certain columns
  - \(R_1 = \pi_L(R_2)\) - L is a list of attributes from the schema of R_2, here we
    only include those tuples in R_1.
  - Extended projection allows L to contain arithmetic on attributes, or some
    other arbitrary expressions which could even add attributes. EG:
    \(\pi_{A+B\to{}C,A,B}(R_1)\).
- Products
  - \(R_3 = R_1 \times R_2\) - pair each tuple of R_1 with each tuple from R_2,
    schema is combination of attributes (rename to R_{1}.attribute if there are
    collisions)
- Theta Joins: (not a *basic*) operator.
  - \(\Join_{\theta}\)
  - Simply a product \times followed by a selection \sigma
- Natural join:
  - looks like bowtie, but no subscript: \(\Join\)
  - performs a join on two relations, on all attributes having the same name.
  - projects out only one copy of the joined columns
  - EG: Sells(bar, beer, price), Bars(bar, addr)
    - Sells (bowtie) Bars has schema (bar beer, price, addr)
- Renaming of relations and attributes
  - \rho operator gives new schema, typically for renaming

Building RA expressions:
- Can combine using precedence
  1. \sigma, \pi, \rho
  2. \times, \(\Join\)
  3. \cap
  4. \cup, \minus
- Grouping with parentheses
- Can also have multiple statements with assignment (similar to compiler
  intermediate form)
- Can also use expression trees (also similar to compilers)

EG: find the bars that sell two different beers at the same time
- use a self join!
- \(\pi_{bar} \sigma_{beer\ne{}beer1} (\text{Sells} \Join \rho_{S(bar,beer1,price)} \text{Sells})\)

*Division Operator*
- Useful for expressing universal quantification (e.g. Find students who
  enrolled in all courses).
- Imagine R(A,B), S(B).
- R / S contains all A-tuples such that for every B-tuple in S, there is an (A,
  B) tuple in R.
- EG: Enroll(sid, cid), Course(cid): Enroll / Course is the set of all sids
  where for each cid in Course, there exists (sid, cid) in Enroll.
- Equivalent expression: let t be the set of attributes in R not in S, and s be
  the set of attributes of s:

  \(R / S = \pi_t R \minus \pi_{t} (R \times S \minus R \Join S )\)

*** Relational Algebra for Bags

Bags allow duplicates.

- Selection: effect is the same on bags as sets. Selecting a set will produce a
  set, etc.
- Projection: when operating on a set, duplicates are removed. When operating on
  bags, duplicates are not removed.
- Products/joins aren't really affected by bags.
- Bag Union: doesn't remove duplicates, so if an item occurs n times in the left
  operand, and m times in the right, the result will have that item n+m times.
- Bag Intersection: not really intuitive. An item will occur the minimum of the
  number of times it occurs in either operand (including 0)
- Bag Difference: item occurs max(n-m, 0) times.

*Beware:* not all algebraic set laws apply to bags!
- R \cup S = S \cup R  /holds/ for bags
- S \cup S \ne S for bags (but it is equal for sets)
  - EG {1} \cup {1} = {1,1}

* 2016-09-07 Wednesday

Review of last lecture:
- Relational query languages, algebra, bag algebra, etc.

Today:
- exercise from last class
- Tuple Relational Calculus
- TRC is declarative, expressing what is the query answer rather than how it
  will be evaluated.
- SQL is "sugar coated TRC"

** Expressing Division in Relational Algebra
- My solution from last class is nearly correct.
- Definitions: R(A,B) and S(B), where A and B are sets of attributes, and t and
  u are tuples over attributes A and B respectively.
- R / S has all tuples t such that for all tuples u in S tu is in R.

- Tuples that "do not qualify": \(\pi_A (\pi_A (R) \times S - R)\)
  - cartesian product of all t and u tuples, minus the ones that actually exist
    in R.
- Then, you can find the actual division: \(\pi_A (R) - \pi_A (\pi_A (R) \times S - R)\)

** Tuple Relational Calculus
Queries of the form \(\{t | P(t)\}\), where \(P(t)\) is a predicate that must be
satisfied by each tuple.

Predicate Calculus:
- Variables and Constants
- Comparison operators (<, \le, =, \ne, >, \ge)
- Connectives: \land \lor \not
- Implication: x \to y, equivalent to \not x \lor y
- Quantifiers: \exists, \forall

Examples:
- Find ID, name, dept-name, salary for instructors whose salary is greater than
  $80,000.
  \(\{t| t \in \text{instructor} \land t[\text{salary}] > 80000\}\)
- Same as before, but only ID output:
  \(\{t| (\exists s) (s \in \text{instructor} \land t[\text{ID}] = s[\text{ID}] \land s[\text{salary}] > 80000)\}\)

We call the output variables free variables, and any others we introduce are
"bounded" variables.

- Find the names of all instructors whose department is in Olin building.


  \(\{t| \exists s \in \text{instructor} (t[\text{name}] = s[\text{name}] \land \exists u \in \text{department} (u[\text{dept-name}] = s[\text{dept-name}] \land u[\text{building}]=\text{"Olin"}))\}\)

- B(bid, bname, color), R(sid, bid, day), S(sid, sname, rating, age)
- Find names of sailors who've reserved a red boat: \(\{t| (\exists s)(\exists r)(\exists b) (S(s) \land s[\text{name}]=t[1 ] \land R(r) \land B(b) \land r[\text{sid}]=s[\text{sid}] \land r[\text{bid}] = b[\text{bid}] \land b[\text{color}]=\text{"red"})\}\)


** Semi Join

In relational algebra, you can have a semi-join, which is like a natural join,
but it is projected onto the schema of the left relation. It is represented by a
bowtie with its right hand side missing.


Question: in TRC, is there any convenience predicate that states that "the
attributes of s and t with the same names are equal", similar to the natural
join condition in RA?

** Safety of TRC Expressions

- Can write TRC expressions that generate infinite relations.
- It is undecidable which expressions are safe or unsafe.
- So we call "safe" expressions ones that satisfy a set of conditions that
  guarantee safety.
- An expression \(\{t|P(t)\}\) in TRC is /safe/ if every component of t appears
  in one of the relations, tuples, or constant expressions in P(t)

** Division isn't always good enough

#+BEGIN_SRC text
Students(sid, sname, major)
Courses(cid, cname, dept)
Enroll(sid, cid, sem, year)
#+END_SRC

1. Find student id's of students who enrolled in all courses in Fall 2016.
2. Find student id's of students who enrolled in all courses offered by their
   major.

   EXERCISE FOR MONDAY: try to write these!

* 2016-09-12 Monday

** Solution to Exercise

These are my solutions before class:

1. Student ID's of students who enrolled in all courses in Fall 2016:

   \(\pi_{sid,cid} (\sigma_{sem=fall \land year=2016} Enroll) / \pi_{cid} (Courses)\)

   Calculus:

   \(\{t^{(1)} | \exists (s) (Student(s) \land t(1)=s[sid] \land
                 (\forall c) (Course(c) \to (\exists e) (Enroll(e) \land
                                           e[sid]=s[sid] \land
                                           e[cid]=c[cid] \land
                                           e[sem]=fall \land e[year]=2016)))\}\)

2. Student ID's of students who enrolled in all courses offered by their major:

   \(\pi_{sid}(Students) - \pi_{sid}(\pi_{sid,cid}(Students ⨝_{major=dept} Courses) - \pi_{sid,cid} Enroll)\)

** Domain Relational Calculus

Similar to TRC, but each query looks like: {<x_1, x_2, \dots, x_n> | P(x_1, x_2, \dots, x_n)}.
The x variables are "domain variables" instead of tuples.

So you can do stuff like:

\(\{(i, n, d, s) | (i, n, d, s) \in \text{instructor} \land s > 80000\}\)

Or just output a name:

\(\{(n) | (i, n, d, s) \in instructor \land s > 80000\}\)

We skipped the existential quantifier above for n, d, and s. It is more formal
to include quantifiers for the bound variables. However a nice shortcut is to
simply stick a placeholder in the bound variables you're not going to use, and
only use variable names for bound variables that you will put conditions or
joins on.  An example for this:

\(\{(i) | (\exists s) ((i,\star,\star,s) \in \text{instructor} \land s > 80000)\}\)

Pretty similar to TRC!

Quiz Wed on RA, TRC, maybe a bit of DRC.

** Intro to SQL

SQL NULL Values exist, and they kinda stink. Comparisons:
- 3-valued: TRUE, FALSE, NULL
- Compare anything to NULL yields UNKNOWN.
- Tuples only included in results if expression is TRUE (not FALSE or UNKNOWN).
- NOT(UNKNOWN) = UNKNOWN
- Think of TRUE=1, FALSE=0, UNKNOWN=1/2.  Then, AND=MIN, OR=MAX, NOT(x)=1-x

Funny example:
- =SELECT bar FROM Sells WHERE price < 2.00 OR price >= 2.00;=
- in a relation containing price=NULL will not return that tuple!
- *law of excluded middle:* p or NOT p should be TRUE, but when p is UNKNOWN,
  then p OR NOT p is UNKNOWN.

* 2016-09-19 Monday

Last class, we had a quiz. Today we went over it. Now we will do SQL and RA
aggregations.

** SQL

- Beers(*name*, manf)
- Bars(*name*, addr, license)
- Drinkers(*name*, addr, phone)
- Likes(*drinker*, *beer*)
- Sells(*bar*, beer, price)
- Frequents(*drinker*, bar)

Drinkers who frequent bars that sells only beers they like.

#+BEGIN_SRC sql
(SELECT name FROM drinkers)
EXCEPT
(SELECT drinker
 FROM Frequents, Sells, Likes
 WHERE Frequents.drinker=Likes.drinker AND
       Frequents.bar=Sells.bar AND
       Sells.beer=Likes.beer;)
#+END_SRC

* 2016-09-21 Wednesday

** Exercise from last time
The above exercise can (not surprisingly) be implemented using NOT EXISTS, but
that's rather inefficient.  I like my EXCEPT query better.

The EXCEPT query can be done in RA:

\(\pi_{name} drinkers - \pi_{name} (\sigma_{Frequents.drinker=Likes.drinker \land Frequents.bar=Sells.bar \land Sells.beer=Likes.beer} (Frequents \times Sells \times Likes))\)

And in calculus, you can use forall to quantify this:

\(\{t^{1} | (\exists f) (Frequents(f) \land f[drinker] = t[1 ] \land
             (\forall s) ((Sells(s) \land s[bar] = f[bar]) \to
                     \not (\exists l) (Likes(l) \land l[drinker]=f[drinker] \land l[beer]=s[beer])))\}\)

Or we can take this further and continue using not exists like SQL

\(\{t^{1} | (\exists f) (Frequents(f) \land f[drinker] = t[1 ] \land
             \not (\exists s) (\exists l) (Sells(s) \land Likes(l) \land
                            s[bar] = f[bar] \land l[drinker]=f[drinker] \land l[beer]=s[beer]))\}\)

These are logically equivalent, it's pretty easy to see.

** SQL Join Expressions

SQL provides (bag) joins (similar to relational algebra).
- NATURAL JOIN
- CROSS JOIN
- R JOIN S ON <cond> (theta join)

** Extended Relational Algebra
* 2016-09-26 Monday

*DATALOG*

Beer schema:

#+BEGIN_SRC text
Frequents(drinker, bar)
Likes(drinker, beer)
Sells(bar, beer, price)
#+END_SRC

Course schema:

#+BEGIN_SRC text
Student(sid, sname, dept)
Enroll(sid, cid, year)
Course(cid, cname, dept)
#+END_SRC

** Intro to Datalog

Datalog is a logical based language similar to DRC.

Anatomy of a rule:

#+BEGIN_SRC text
HEAD(values) <- Subgoals(a,b,c) AND MoreSubgoals(a,c,d)
#+END_SRC

- A variable appearing in the head is /distinguished/, otherwise it is
  /nondistinguished/. This is similar to bound and unbound variables. For
  example:

  #+BEGIN_SRC text
  Happy(d) <- Frequents(d, bar) AND Likes(d, beer) AND Sells(bar, beer, p)
  #+END_SRC

  In this example, =d= is a distinguished variable. =beer=, =bar=, and =p= are
  nondistinguished.

- Projection is achieved by simply not including variables in the head.

- Selection is achieved through conditions, like:

  #+BEGIN_SRC datalog
  CSStudents <- Student(s, _, d) AND (d = "CS")
  #+END_SRC

- Joins are used by using the same /nondistinguished/ variable for the
  attributes along the join. The equivalent to \(\pi_{\text{sid}} (\text{Student}
  \Join \text{Enroll} \Join \text{Course})\) is:

  #+BEGIN_SRC datalog
  Answer(s) <- Student(s, _, d) AND Enroll(s, c, _)
                AND Course(c, _, d)
  #+END_SRC

  Those are, in particular, natural joins. Theta joins can be achieved by adding
  additional things expressing our conditions, and potentially using different
  variables.

** Safety of Datalog Rules

- A rule is safe if:
  1. Each distinguished variable,
  2. Each variable in an arithmetic subgoal, and
  3. Each variable in a negated subgoal,
  also appears in a nonnegated, relational subgoal.

- Safe rules prevent infinite results.

Some example unsafe rules:
1. =S(x) <- R(y)= because =x= doesn't appear in a nonnegated relational subgoal.
2. =S(x) <- R(y) AND NOT R(x)= for the same reason
3. =S(x) <- R(y) AND x < y= again

** Datalog programs

Structure:
- A datalog program is a collection of datalog rules
- Predicates of rules can be either:
  - Extensional database (a stored table) - "EDB"
  - Intensional database (a relation defined by a rule) - "IDB"
  - this is similar to a SQL subquery
- Heads of rules can never assign to extensional tables.
- Multiple rules can define a single relation, and so instead of OR in datalog
  you can use multiple predicates/rules, EG:

  #+BEGIN_SRC datalog
  CEorCS(s) <- Student(s, _, "CE")
  CEorCS(s) <- Student(s, _, "CS")
  #+END_SRC

** Recursion

Example: EDB has =Par(c, p)=, where =p= is a parent of =c=. We define a
generalized cousin relation:

#+begin_src datalog
Sib(x,y) <- Par(x,p) AND Par(y,p) AND x != y
Cousin(x, y) <- Sib(x,y)
Cousin(x, y) <- Par(x, xp) AND Par(y, yp) AND Cousin(xp, yp)
#+end_src

Definition of recursion
- The rules form a dependency graph with nodes that are the IDB relations.
- A directed edge exists between the head of a rule and the IDB relations in the
  predicates.
- Recursion is defined when where is a cycle in the dependency graph.

Evaluation:
- So long as there is no negation in the rules:
  - Naive approach:
    1. Start with empty IDB.
    2. Apply rules to get new IDB.
    3. If the IDB changed, start again with new IDB.
    4. When the IDB no longer changes, output new result.
  - Less naive approach:
    1. Start with empty IDB.
    2. Apply rules to get new IDB.
    3. Whenever a new tuple gets added to an IDB relation, evaluate all the
       rules that depended on it, for just that tuple.
    This approach works because each rule will only add tuples to IDB relations,
    and so we don't have to redo any work.

** Recursion in SQL

SQL allows recursion too.  Thanks, Datalog!

#+begin_src sql
WITH Sib(x,y) AS
  SELECT p1.child, p2.child
  FROM Par p1, Par p2
  WHERE p1.parent = p2.parent AND
    P1.child != p2.child
RECURSIVE Cousin(x,y) AS
  (SELECT * FROM Sib)
    UNION
  (SELECT p1.child, p2.child
   FROM Par p1, Par p2, Cousin
   WHERE p1.parent = Cousin.x AND
         p2.parent = Cousin.y;
#+end_src

Quiz Monday: SQL + Datalog

* 2016-09-28 Wednesday
Last time we discussed Datalog and recursion in SQL. Today we will discuss SQL
recursion.

** SQL Recursion

*** Example 1
EDB Schema:
#+begin_src text
Par(child, parent)
#+end_src
Find Sally's cousins, using SQL like the recursive Datalog example.
#+begin_src sql
WITH Sib(x,y) AS
  SELECT p1.child, p2.child
  FROM Par p1, Par p2
  WHERE p1.parent = p2.parent AND
        p1.child != p2.child;
#+end_src
This establishes the initial sibling table. Next we have the recursive rule:
#+begin_src sql
WITH ...
RECURSIVE Cousin(x,y) AS
  (SELECT * FROM Sib)
      UNION
  (SELECT p1.child, p2.child
   FROM Par p1, Par p2, Cousin
   WHERE p1.parent = Cousin.x AND
         p2.parent = Cousin.y
#+end_src
And now we can find Sally's cousins:
#+begin_src sql
SELECT y
FROM Cousin
WHERE x="Sally";
#+end_src

*** Legal SQL Recursion
Can't have "meaningless" recursion - SQL restricts it.  EG:
- EDB: =P(x) = {(1)}=
- IDB: =Q(x) <- P(x) AND NOT Q(x)=
- Is (1) in Q(x)?
  - It's a paradox.

In order to define legal SQL recursion:
1. Define "monotone" recursions.
2. Define a "stratum graph" to represent connections among subqueries.
3. Proper SQL recursions are defined in terms of the stratum graph.

*Monotonicity:* If relation P is a function of relation Q (and perhaps others),
we say P is /monotone/ in Q if inserting tuples into Q cannot cause any tuple to
be deleted from P.

#+begin_src sql
SELECT AVG(price)
FROM Sells
WHERE bar = "Joe's Bar";
#+end_src sql

Not monotone, because inserting into =Sells= will change the average price,
deleting the old one.

*Stratum Graph:*

- Arcs P->Q:
  1. P is a rule head and Q is a relation in the FROM list (not of a subquery).
  2. P is a rule head and Q is an immediate subquery of that rule.
  3. P is a subquery, and Q is a relation in its FROM or an immediate subquery.
- Place minus sign on arc if not monotone.

*Legal Recursion:* If you can bound the number of minus signs on any path,
 including cycles.

Example from Cousin example:
#+begin_src text
Sib = ...
Cousin = ( ... FROM Sib ... )
   UNION
   ( ... FROM Cousin ... )
#+end_src

** Datalog & SQL Exercises
Schema:
#+begin_src text
Movies(title, year, length, genre, studioName, producerC#)
Stars(movieTitle, movieYear, starName)
MovieStar(name, address, gender, birthdate)
MovieExec(name, cert#, address, networth)
Stud(name, address, presC#)
#+end_src

a. Express this in English:
   #+begin_src sql
   SELECT M.title
   FROM Movies M
   GROUP BY M.title
   HAVING COUNT(*) > 1;
   #+end_src

   This means: find titles that occur more than once.

b. Express the query in part (a) without aggregation.

  #+begin_src sql
  SELECT M1.title
  FROM Movies M1, Movies M2
  WHERE M1.title = M2.title AND
        M1.year != M2.year;
  #+end_src

c. Express the query in part (a) in Datalog

  #+begin_src text
  Answer(t) <- Movies(t, y1, _, _, _, _)
               AND Movies(t, y2, _, _, _, _)
               AND NOT y1 = y2;
  #+end_src

Express the query: Find the names of stars who star in every movie produced by
"MGM" studios.

a. In SQL

   #+begin_src sql
   SELECT ms.name
   FROM MovieStar ms
   WHERE NOT EXISTS (
       SELECT *
       FROM Movies m
       WHERE m.studio = "MGM" AND NOT EXISTS (
           SELECT *
           FROM Stars s
           WHERE s.movieTitle = m.title AND
                 s.movieYear = m.year));
   #+end_src

b. In Datalog

   #+begin_src text
   NotInAnMGMMovie(n) <- Movies(t, y, _, _, "MGM", _) AND NOT Stars(t, y, n) AND MovieStar(n, _, _, _)
   Answer(n) <- Stars(_, _, n) AND NOT NotInAnMGMMovie(n)
   #+end_src

   The last part (=AND MovieStar(n, _, _, _)=) ensures the safety of the
   expression! Otherwise, =n= would have only appeared in a negated sub-goal.

Now the query for "who only stars in MGM Movies", to illustrate the difference.

#+begin_src text
InNonMGMMovie(n) <- Movies(t, y, _, _, s, _) AND Stars(t, y, n) AND s != "MGM"
Answer(n) <- Stars(_, _, n) AND NOT InNonMGMMovie(n)
#+end_src

This "only" query in SQL:
#+begin_src sql
SELECT name FROM MovieStar
EXCEPT
SELECT s.name
FROM Stars s, Movies m
WHERE s.movieTitle = m.title AND
      s.movieYear = m.year AND
      m.studioName != "MGM";
#+end_src

#+begin_src sql
SELECT DISTINCT s.name
FROM Stars s, Movies m
WHERE NOT EXISTS (
  SELECT *
  FROM Movies m, Stars s2
  WHERE s2.starName = s.name AND
        s2.movieTitle = m.title AND
        s2.movieYear = m.year AND
        m.studioName != "MGM");
#+end_src

** SQL Aggregation Examples

#+begin_src text
Courses(cid, cname, dept, credithrs)
Enrollment(sem, year, sid, cid)
#+end_src

Find courses with minimum number of students for each dept for Fall 2015. Output
dept, course name, number of students

#+begin_src sql
WITH Fall2015EnrollmentCounts(cid, count) AS
    SELECT cid, COUNT(sid)
    FROM Enrollment
    WHERE sem = "fall" AND year=2015
    GROUP BY cid
SELECT dept, cname, count
FROM ...
#+end_src
