#+TITLE: EECS 433 Notes
#+AUTHOR: Stephen Brennan
#+SETUPFILE: config.setup

* 2016-08-29 Monday

** Course Logistics

- Office hours: M-W 1:30-2:30 PM, Olin 511
- TA: George Hodulik: 1:30-2:30 PM, Olin 503
- \exists a Blackboard site
- Grading:
  - Midterm - 30%
  - Project - 35%
  - Quizzes - 30%
  - Participation - 5%
- Dates:
  - Midterm: Wed, Oct 19
  - Project Proposal: Oct 5
  - Project Progress Report: Nov 2
  - Project Progress Presentation: Nov 7, 9
  - Final Project Reports: Dec 8
  - Project Presentations: Last week of class (Dec 5, 7)
- Projects are in group.
- Textbooks:
  - Database Systems: The Complete Book (Meral likes this best)
  - Database System Concepts / other undergrad textbook acceptable
  - Papers
- Topics:
  - Basic RA, SQL, relational query optimization (undegrad)
  - Object-Oriented Databases
  - Semistructured Data, XML, XPath, XQuery (odd)
  - RDF, SparQL
  - Parallel & Distributed Databases
  - Information Integration, data warehouses, OLAP
  - No-SQL, Graph databases as time allows

** Review of Undergraduate Concepts

- Database - stored, structured data modeling the real world. Usually with
  entities and relationships.
- DBMS - software designed to maintain/manage the database
- Data Models for Structuring Data
  - Entity-Relationship Model (general first step)
  - Hierarchical Data Model (legacy)
  - Network Data Model (legacy)
  - Relational Data Model (major use)
  - Object-Oriented Data Model (specialized use) - usually in-memory only
  - Object-Relational Data Model (more common)
  - XML
  - RDF
- Query languages:
  - Symbolic-Logic Based:
    - Relational Calculus: 1st-order predicate calculus
    - Datalog: high-order predicate calculus (recursion!)
    - Dedalus (datalog w/ aggregation functions)
  - Algebra-based:
    - Relational Algebra
    - Object-Algebra (relational algebra plus object manipulation)
  - SQL: "industry standard", sometimes horrifying, Meral would say "a mess".
    Basics are important, and most extensions are imported from the other query
    languages and their ideas.
  - XPATH, XQUERY (borrows from SQL and uses XPATH)
  - SPARQL - querying for RDF
  - Graphical query languages
- Database Design Theory
  - Restructuring the relations at design time
  - Has bad reputation, but extensive theory

*** Data Models, DBMS

- *data model* - collection of concepts for describing data
- *schema* - a description of a particular collection of data, using a data
  model
- DDL/DML
- Levels of abstraction:
  - *views* - how the user sees the data. many of these
  - *conceptual schema* - defines the logical structure of the data
  - *physical schema* - how the data is stored
- Independence:
  - *logical data independence* - application protected from changes in
    /logical/ structure of data (new columns, etc). Limited benefits only.
  - *physical data independence* - application protected from the way the data
    is stored. DBMS gives big benefits here.
- Concurrency control:
  - Allow interleaving of many different users' actions, giving the impression
    of a single-user system
  - Interleaving can lead to inconsistency; must control that
  - *transaction* - atomic sequence of actions
  - Scheduling transactions {T_1, T_2, \dots, T_n} concurrently requires the DBMS to
    ensure that the concurrent execution is equivalent to some /serial/
    execution.
  - *2PL Locking* - transaction must request a lock before reading/writing an
    objects, and release when finished
    - Granularity: row?, column?, table?, file?
    - deadlocks? (may not be a problem)
- ACID
  - Atomicity
    - keep a /log/ of all actions carried out while executing
    - on startup, look for incomplete (crashed) transactions and roll back
  - Consistency
  - Isolation
  - Durability

*** Relational Model

Why know?  Foundation of others!

- *relational database* - a set of relations
- *relation*
  - *instance* - a table with rows, columns
    - /cardinality/ - number of rows
    - /degree/ - number of columns
  - *schema* - description of a relation

SQL basics - CREATE TABLE, INSERT, etc.

Integrity constraints:
- conditions that must be true for all instances of a relation
- specified on schema definition, verified on modification of data
- e.g. NOT NULL, key constraints, uniqueness,
- *primary key constraints* (these apply to sets of attributes)
  - (1) no duplicates: no two tuples have the same values in all attributes
  - (2) nonredundancy: property (1) is not true for any subset (otherwise,
    "superkey")
  - all sets of attributes satisfying both are candidate keys, only one is
    chosen for primary key.
  - Specify candidate key in SQL with UNIQUE, primary with PRIMARY
  - Specify that you want an index built with KEY

* 2016-08-31 Wednesday

From last time: integrity constraints:
- Primary key constraints, uniqueness

** Relational Model
*** Foreign Key Constraints

*foreign key* - fields in one relation referring to a tuple in another
relation.  Like a "logical pointer".

Must have /referential integrity/, which means that when a foreign key refers to
a tuple in another relation, that tuple should exist in the other relation.

How to enforce:
- Imagine relations "Student" and "Enrolled", where the attribute =sid= of
  Enrolled is a foreign key referring to Student.
- On insertion of an Enrolled tuple where =sid= refers to a non-existing
  Student, /reject/ that insertion.
- On deletion of a Student where a tuple in Enrolled refers to it:
  - Reject the deletion until the Enrolled tuple is deleted
  - "Cascade" the deletion, removing all tuples in other relations (like
    Enrolled) that refer to it.
  - Replace all instances of =sid= with NULL in referring tuples.

*** Relational Query Languages

Advantage of relational model is that it can be intuitively queried.
- Languages can allow extensive reordering of operations so long as the result
  is semantically the same.

*SQL* woo

Semantics of SQL Query:
1. FROM clause: compute the cross product of the relations queried
2. WHERE clause: filter these tuples by a condition
3. SELECT clause: output only certain attributes of a tuple

*** Summary

- tabular representation
- relationships between tuples
- integrity constraints keep data "nice"
- queried easily thanks to SQL

** Formal Relational Query Languages

There are two query languages which form the theoretical basis of SQL:
- Relational Algebra (the operational language)
- Relational Calculus (the semantic language)

*** Relational Algebra

What is an algebra?
- Mathematical system consisting of
  - /operands/ - variables or values from which new values can be produced. In
    relational algebra, operands are relations or variables representing them.
  - /operators/ - operations that can be performed on operands. In RA, these are
    the common database operations performed on relations (see below).

Operators:
- Union, Intersection, Difference
  - Have their usual meaning, but must relations must have same schema
- Selection: picking certain rows
  - R_1 = \sigma_C(R_2) - select tuples from R_2 according to condition C, assign
    them to R_1.
- Projection: picking certain columns
  - R_1 = \pi_L(R_2) - L is a list of attributes from the schema of R_2, here we only
    include those tuples in R_1.
  - Extended projection allows L to contain arithmetic on attributes, or some
    other arbitrary expressions which could even add attributes. EG:
    \pi_{A+B\to{}C,A,B}(R_1).
- Products
  - R_3 = R_1 \times R_2 - pair each tuple of R_1 with each tuple from R_2, schema is
    combination of attributes (rename to R_{1}.attribute if there are collisions)
- Theta Joins: (not a *basic*) operator.
  - operator looks like bowtie, has any condition as a subscript
  - Simply a product \times followed by a selection \sigma
- Natural join:
  - looks like bowtie, but no subscript
  - performs a join on two relations, on all attributes having the same name.
  - projects out only one copy of the joined columns
  - EG: Sells(bar, beer, price), Bars(bar, addr)
    - Sells (bowtie) Bars has schema (bar beer, price, addr)
- Renaming of relations and attributes
  - \rho operator gives new schema, typically for renaming

Building RA expressions:
- Can combine using precedence
  1. \sigma, \pi, \rho
  2. \times, (bowtie)
  3. \cap
  4. \cup, \minus
- Grouping with parentheses
- Can also have multiple statements with assignment (similar to compiler
  intermediate form)
- Can also use expression trees (also similar to compilers)

EG: find the bars that sell two different beers at the same time
- use a self join!
- \pi_{bar} \sigma_{beer\ne{}beer1} (Sells (bowtie) \rho_{S(bar,beer1,price)} Sells)

*Division Operator*
- Useful for expressing universal quantification (e.g. Find students who
  enrolled in all courses).
- Imagine R(A,B), S(B).
- R / S contains all A-tuples such that for every B-tuple in S, there is an (A,
  B) tuple in R.
- EG: Enroll(sid, cid), Course(cid): Enroll / Course is the set of all sids
  where for each cid in Course, there exists (sid, cid) in Enroll.
- Equivalent expression: let t be the set of attributes in R not in S, and s be
  the set of attributes of s:

  R / S = \pi_t R \minus \pi_{t} (R \times S \minus R (bowtie) S )

*** Relational Algebra for Bags

Bags allow duplicates.

- Selection: effect is the same on bags as sets. Selecting a set will produce a
  set, etc.
- Projection: when operating on a set, duplicates are removed. When operating on
  bags, duplicates are not removed.
- Products/joins aren't really affected by bags.
- Bag Union: doesn't remove duplicates, so if an item occurs n times in the left
  operand, and m times in the right, the result will have that item n+m times.
- Bag Intersection: not really intuitive. An item will occur the minimum of the
  number of times it occurs in either operand (including 0)
- Bag Difference: item occurs max(n-m, 0) times.

*Beware:* not all algebraic set laws apply to bags!
- R \cup S = S \cup R  /holds/ for bags
- S \cup S \ne S for bags (but it is equal for sets)
  - EG {1} \cup {1} = {1,1}

* 2016-09-07 Wednesday

Review of last lecture:
- Relational query languages, algebra, bag algebra, etc.

Today:
- exercise from last class
- Tuple Relational Calculus
- TRC is declarative, expressing what is the query answer rather than how it
  will be evaluated.
- SQL is "sugar coated TRC"

** Expressing Division in Relational Algebra
- My solution from last class is nearly correct.
- Definitions: R(A,B) and S(B), where A and B are sets of attributes, and t and
  u are tuples over attributes A and B respectively.
- R / S has all tuples t such that for all tuples u in S tu is in R.

- Tuples that "do not qualify": \pi_A (\pi_A (R) \times S - R)
  - cartesian product of all t and u tuples, minus the ones that actually exist
    in R.
- Then, you can find the actual division: \pi_A (R) - \pi_A (\pi_A (R) \times S - R)

** Tuple Relational Calculus
Queries of the form {t | P(t)}, where P(t) is a predicate that must be satisfied
by each tuple.

Predicate Calculus:
- Variables and Constants
- Comparison operators (<, \le, =, \ne, >, \ge)
- Connectives: \land \lor \not
- Implication: x \to y, equivalent to \not x \lor y
- Quantifiers: \exists, \forall

Examples:
- Find ID, name, dept-name, salary for instructors whose salary is greater than
  $80,000.
  {t| t \in instructor \land t[salary] > 80000}
- Same as before, but only ID output:
  {t| (\exists s) (s \in instructor \land t[ID] = s[ID] \land s[salary] > 80000)}

We call the output variables free variables, and any others we introduce are
"bounded" variables.

- Find the names of all instructors whose department is in Olin building.

  {t| \exists s \in instructor (t[name] = s[name] \land \exists u \in department (u[dept-name] = s[dept-name] \land u[building]="Olin"))}

- B(bid, bname, color), R(sid, bid, day), S(sid, sname, rating, age)
- Find names of sailors who've reserved a red boat: {t| (\exists s)(\exists r)(\exists b) (S(s) \land s[name]=t[1 ] \land R(r) \land B(b) \land r[sid]=s[sid] \land r[bid] = b[bid] \land b[color]="red")}

** Semi Join

In relational algebra, you can have a semi-join, which is like a natural join,
but it is projected onto the schema of the left relation. It is represented by a
bowtie with its right hand side missing.


Question: in TRC, is there any convenience predicate that states that "the
attributes of s and t with the same names are equal", similar to the natural
join condition in RA?

** Safety of TRC Expressions

- Can write TRC expressions that generate infinite relations.
- It is undecidable which expressions are safe or unsafe.
- So we call "safe" expressions ones that satisfy a set of conditions that
  guarantee safety.
- An expression {t|P(t)} in TRC is /safe/ if every component of t appears in one
  of the relations, tuples, or constant expressions in P(t)

** Division isn't always good enough

Students(sid, sname, major)
Courses(cid, cname, dept)
Enroll(sid, cid, sem, year)

1. Find student id's of students who enrolled in all courses in Fall 2016.
2. Find student id's of students who enrolled in all courses offered by their
   major.

   EXERCISE FOR MONDAY: try to write these!

* 2016-09-12 Monday

** Solution to Exercise

These are my solutions before class:

1. Student ID's of students who enrolled in all courses in Fall 2016:

   \pi_{sid,cid} (\sigma_{sem=fall \land year=2016} Enroll) / \pi_{cid} (Courses)

   Calculus:

   {t^{(1)} | \exists (s) (Student(s) \land t(1)=s[sid] \land
                 (\forall c) (Course(c) \to (\exists e) (Enroll(e) \land
                                           e[sid]=s[sid] \land
                                           e[cid]=c[cid] \land
                                           e[sem]=fall \land e[year]=2016)))}

2. Student ID's of students who enrolled in all courses offered by their major:

   \pi_{sid}(Students) - \pi_{sid}(\pi_{sid,cid}(Students ⨝_{major=dept} Courses) - \pi_{sid,cid} Enroll)

** Domain Relational Calculus

Similar to TRC, but each query looks like: {<x_1, x_2, \dots, x_n> | P(x_1, x_2, \dots, x_n)}.
The x variables are "domain variables" instead of tuples.

So you can do stuff like:

{<i, n, d, s> | <i, n, d, s> \in instructor \land s > 80000}

Or just output a name:

{<n> | <i, n, d, s> \in instructor \land s > 80000}

We skipped the existential quantifier above for n, d, and s. It is more formal
to include quantifiers for the bound variables. However a nice shortcut is to
simply stick a placeholder in the bound variables you're not going to use, and
only use variable names for bound variables that you will put conditions or
joins on.  An example for this:

{<i> | (\exists s) (<i,\star,\star,s> \in instructor \land s > 80000)}

Pretty similar to TRC!

Quiz Wed on RA, TRC, maybe a bit of DRC.

** Intro to SQL

SQL NULL Values exist, and they kinda stink. Comparisons:
- 3-valued: TRUE, FALSE, NULL
- Compare anything to NULL yields UNKNOWN.
- Tuples only included in results if expression is TRUE (not FALSE or UNKNOWN).
- NOT(UNKNOWN) = UNKNOWN
- Think of TRUE=1, FALSE=0, UNKNOWN=1/2.  Then, AND=MIN, OR=MAX, NOT(x)=1-x

Funny example:
- SELECT bar FROM Sells WHERE price < 2.00 OR price >= 2.00;
- in a relation containing price=NULL will not return that tuple!
- *law of excluded middle:* p or NOT p should be TRUE, but when p is UNKNOWN,
  then p OR NOT p is UNKNOWN.
