#+TITLE: EECS 393 Notes
#+AUTHOR: Stephen Brennan
#+SETUPFILE: config.setup

* 2015-11-13 Friday

  Quiz today (Testing)

* 2015-10-21 Wednesday

  Quiz today (OOD).  Notes
  - Characteristics:
    - Encapsulation
    - Inheritance
    - Polymorphism
  - Inheritance: must be is-a relationship
    - Misused to provide partial implementation.  Must use is-a
    - Fix this misuse w/ composition.
  - Mutiple Inheritance is complex, ambiguous
  - Interface: set of operations.  Type is a named interface.
  - Subtypes are supersets of interfaces.
  - Polymorphism advantages:
    - Simplifies definition of clients
    - Decouples objects from each other
    - Vary relationships at runtime.
    - Code can be used with new classes
  - Interface inheritance vs implementation inheritance :) Should program to
    interface.
  - Refinement:
    - Improve nheritance hierarchies
      - Use is-a hierarchies.
      - Factor common responsibilities high.
    - Analyze collaboration to identify subsystems.
      - Strongly coupled classes (collaboration graph)
      - May want to add facade class
      - Subsystems present interfaces to the rest of the program, and delegate
        it to different classes.
    - Then, design methods.

* 2015-10-02 Friday

  We're doing classes.  And object oriented design.

* 2015-09-25 Friday

  Uh oh, there's a quiz today!  Better take notes on the last couple weeks of
  stuff.  The material is essentially from last quiz (9/9) on.  Which appears to
  be simply software requirements.  Let's gogogogo.

** What are Requirements?
   - Properties your software must exhibit to meet needs (of users).
   - SRS = software requirements specification
   - Derived collaboratively: customer + devs
   - Process = req engineering
   - Lots of people use requirements!  Not just developers and customers, but
     management, lawyers, documenters, etc.  And users.

*** Functional Requirements
    - Describe functionality for users.
    - Use natural language + problem domain.
    - Can be a bit ambiguous, interpretable.
    - Can have hundreds or thousands.

*** Non-Functional Requirements
    - All the other requirements
    - Types:
      - Usability
      - Reliability
      - Availability
      - Efficiency/performance
      - Security
      - Hardware/software constraints
      - Portability
      - Compliance
      - Certification

*** Requirements vs Design
    - You don't want to include "design" stuff in the SRS.
      - Requirements = what, not how
      - Don't want unnecessary constraints on the implementers.
    - However, gotta be careful not to make your requirements too abstract.  You
      need /some/ details after all.

*** Design Patterns in Requirements
    - Design pattern = reusable solution to a recurring problem.
    - Requirements should have "architectural design patterns"
    - They will raise specific questions about what the product's requirements
      ore.
    - For instance, if you have a web site for a music store, it raises a lot of
      questions about the website that help clarify your requirements.
    - Much better than if you hadn't specified the "web store" design pattern.

*** Detail
    - Different levels for different people.
    - Different goals depending on who you're targeting.

**** Business Requirements
     - High level
     - They are about business objectives.
     - Not much about the specific functionality.
     - EG: what are your goals with the software.  What business problem will
       you solve, or objective will you satisfy.

**** User Requirements
     - Describe tasks that users will accomplish.
     - You may have multiple user requirements that will relate to one business
       requirement.

**** Functional/Non-Functional
     - These are the most detailed requirements.
     - They describe functionality that satisfies user requirements.
     - Probably you'll get multiple F/NF reqs for a single User req.

**** Overall

     In essence, you use the business needs, or marketing information, to get
     business requirements.  From there, you come up with the user requirements
     to satisfy those, and then you make F/NF requriments that satisfy each user
     requirement.

** Software Features
   - Groups of related FR's.
   - May influence customers to choose your product.
   - probably used in marketing.
   - Feature tree

** Properties of Good SRS
   - Complete - nothing missing.
   - Correct
   - Feasible - it should be possible to create the system in the available
     resources and time.
   - Unambiguous - as much as possible :D
   - Consistent - no conflicts
   - Validateable - should be easy to say whether each requirement is satisfied.
   - Modifiable - you should be able to easily revise it with structure, labels,
     stuff.
   - Traceable - each requirement should be linked back to its origin, and
     froward to its design elements.  And the source code that implements it.
     And the test cases that exercise it.

** Requirements Engineering
   - Identify use cases
   - Analyze info from users.
   - Allocate requirements to top level components.
   - Negotiating priorities
   - Documenting the requirements (creating SRS)
   - Reviewing requirements to ensure everyone understands.

* 2015-09-18 Friday

** Information Gathering Techniques

   - Interviews
   - Facilitated requirements workshops
   - Document analysis.
   - Lots of stuff.

** Use Case

   - Describes a set of related usage scenarios for a software system.
   - Not sufficient as a list of functional requirements.
   - Can be used in addition to functional requirements.
   - Can derive functional requiremnets from each use case.

* 2015-09-16 Wednesday

** Moar Requirements

   Levels of Detail in Requirements Specification
   - Different audiences want different levels.
   - Business requirements: high level, business constraints, etc.
   - User requirements: describe what the users need to do.

* 2015-09-11 Friday

** Software Requirements

   - Properties a software product must exhibit to meet the needs of users.
   - Described in a softare requirements specification (SRS) document.
   - Should be derived and specified collaboratively w/ customer & devs.
   - Process of developing reqirements is called requirements engineering.

   Consumers of Requirements:
   - Project sponsors
   - Managers
   - Users
   - Designers
   - Programmers
   - Testers
   - Maintainers
   - Trainees
   - Documentation writers
   - Lawyers ("at the bottom")

   Functional Requirements
   - Describe functionality a product must provide.
   - Written primarily in natural language.
     - Shouldn't use any "technical language".  If any jargon is used, it should
       be the "product domain" jargon, not the software development jargon.
   - Open to interpretation, can be ambiguous, this should be resolved before
     design.
   - For a complex system, could be hundreds or thousands of requirements.

* 2015-09-09 Wednesday

  QUIZ TODAY.  Starts at 12:10.  Studying.  Two slide decks from previous
  lectures: Software Process Models and Agile Methods

** Software Process Models

   There are graphics to depict how software is made.

   Models:
   - Build & Fix (anti): Build first version, modify until client is fixed, and
     maintain.
     - No spec, design document.
     - Bad for large projects.
   - Basic Waterfall: Requirements -> Design -> Implementation -> Validation ->
     Maintenance.
     - Requirements: what it should do.
     - Design: how it will be structured to do it
   - Waterfall Augmented with Iteration: replace the validation stage with
     "integration", and from maintenance you can update requirements and go back
     to specification, design, implementation, etc.
     - Criticisms of Waterfall + Requirements are that they encourage lots of
       bulk and extra features.
   - Prototyping:
     - Throwaway - quick and dirty, focus on the risky stuff first, just to see
       whether the client likes it.
       - Prototyping done after outlining requirements, but before specification
         of the actual system.
     - Evolutionary - basics first to see what the client wants out of it.
     - Operational - observer goes to clients with evolutionary prototype.
       Watches clients and develops new throwaway prototypes.  If clients like
       it, he sends the requirements back to the team to create a new
       evolutionary prototype.
   - Incremental Delivery: basically iterated waterfall
     - Get sooner feedback, most important features get most testing.
     - Can respond to changing requirements better.
   - Spiral Model: for high risk projects.  Four stages: objectives, risk
     analysis, development+validation, planning.
     - Best when you have high risk, lots of time, and clients in the same
       organization.

** Agile Methods

   - Aim to respond better to frequent changes, with less emphasis on planning,
     design, and documentation.
   - Extreme Programming
     - Principles
       - Rapid feedback
       - Simplicity
       - Embracing changes
       - Quality work
     - Practices
       - Planning - user stories, cards, prioritize, etc.
       - Small releases, working system after just a few releases.  (every few
         days/weeks)
       - Metaphors
       - Simple design - remove complexity
       - TDD
* 2015-09-02 Wednesday

** Incremental Delivery

   - Series of builds, each provides a subset of functionality.
   - Each increment follows a pretty standard waterfall design process.
   - Very similar to an evolutionary prototype, but with waterfall in each
     increment.

   Advantages:

   - Client can exploint product functionality sooner.
   - Client can adapt gradually.
   - Developer gets earlier feedback.

** Spiral Model
   - For mega defense stuff.
   - Four phases:
     - 
* 2015-08-31-Monday
  *GUEST SPEAKER ON INPSECTIONS*

  Why inspect?  To hold your company's code to a standard of excellence by
  finding defects in code before it's shipped.  It also makes developers more
  disciplined in creating code that satisfies your standards.

** Objectives
   - Promote completeness and correctness in the product.
   - Promote adherence to project style and rules of construction.
   - Compliance with the technology practices of the organization.
   - Examination of the product from the user's viewpoint as well as the
     producer's.

** Inspection Roles

   - Author - developer responsible for work product.
   - Inspectors - inspect work product
   - Scribe/Recorder - records the issues
   - Moderator - directs preparation and inspection meeting; reports results to
     manager.
   - Manager - schedules inspection, assigns moderator and team, manages
     follow-up.

** Rules

   - Manager is not present.
   - Inspectors take turns presenting issues.
   - Inspectors are tactful.
   - Author does not defend work.
   - Problems are not solved at the meeting.

** Checklists

   - PEP8
   - Useful for reminding inspector of important issues.
   - May inhibit them from discovering other issues.
   - Perhaps best consulted after first read of work product.
* 2015-08-28 Friday

** Incentive Mismatch

   - Schrage claims that requirements create perverse incentives.
   - It's easy for a client to build a "wish list" of requirements.
   - Developers are paid to implement requirements, so they do it.
   - He advocated for "prototyping", and for small requirements.
   - He says that it makes clients more likely to accept the result (if it's
     perceived as partly their work as well).

** Prototyping

   - A prototype is an incomplete model (typically executable, not just a
     storyboard) of a system.  It's made rapidly based on your initial
     requirements and provided to users for evaluation and feedback.
   - Makes it easier to refine and validate the requirements, especially with
     look and feel / UI.
   - Also can be good to validate internal design, like performance.
   - Focus on the areas of greatest risk for the project.
   - To rapidly prototype:
     - Omit functionality.
     - Ignore non-functional constraints (like efficiency)
     - Reuse existing components, use rapid prototyping languages like Python!

***   Types of prototyping

      - Throwaway - not built upon later.  It might be pretty awful, but it
        works.
        - Goal is to build the poorly understood parts first to clarify the
       requirements.
      - Evolutionary - will be refined iteratively to create the final product.
        (IT'S SO AGILE!)
        - Usually needs refactoring
        - Goal is to build the well understood parts first, and uncover any
          unkown requirements as you go, evolving to fit the requirements.

*** Operational Prototyping

      - Combines thrawaway and evolutionary prototyping.
      - An evolutionary prototype is constructed and made into a baseline using
        conventional methods.
      - Copies of he baseline are sent to multiple customer sites with a trained
        prototyper.
      - At each site, the prototyper observes the use of the system and tracks
        feature requests/issues/etc.
      - After the observation period, prototyper adds a throwaway prototype on
        top of the baseline, and the user evaluates them.
        - If they're ineffective, they are removed.
        - If the users like the new prototype, the prototyper submits a change
          request to the development team, and the development team works on the
          evolutionary prototype.

*** Drawbacks of Prototyping

    - You neglect up-front analysis by relying on the customer to provide
      feedback.  There's a bit of a tradeoff here.
    - Users might misunderstood the purpose of the prototype:
      - Maybe they'll like it too much and keep it, and not finish the contract.
      - Maybe they'll think it's bad and lose confidence in the developer.
    - Can lead to feature creep when you accomodate every feature request.
    - Wasted effort prototyping (when you could have drawn on paper, or verbally
      asked, etc...).

** Incremental Delivery

   This is a "tweak" to evolutionary prototyping.  It's the basis for AGILE.

   - Built + delivered in increments/builds.
   - Each increment provides a subset of the system's functionality.
   - Services are allocated to increments based on customer's priorities.
   - Conventional development process is applied to each increment.  (AGILE
     methods sometimes skimp on this).
* 2015-08-26 Wednesday

** Software Process Models

   - Graphical models of the software development process.
   - Characterize workflow
   - Have descriptive and prescriptive purposes
     - Some people advocate models that will help you make better software.

*** Anti-model: Build & Fix

    - Build first version
    - Modify until client is satisfied

    Problems with this:

    - Product is implemented without specification or design documents. (!)
      - Lack of planning... it sucks.
    - Reworked until the client is satisfied.
      - This is a moving target.
    - Works poorly for large products.
    - Maintenance is likely to be very difficult.

    Ways to improve:

    - Add a requirements document.
    - Add a planning stage.

*** Basic Waterfall Model

    - Phases: (this is kinda a combination of multiple slides)
      - Requirements
        - Elicitation and analysis: determine what it should do.  This is a good
          time to meet with a client and help them describe exactly what their
          software should do.
        - Specification: after your analysis, you write a specification of what
          the software should do.  Called SRS
      - Design: intermediate between requirements and implementation.  Describes
        the structure and behavior in a way that satisfies the requirements, but
        doesn't actually implement it.
      - Implementation: coding yo.
      - Validation: the set of activities that you do to make sure you deliver
        the right product.
        - Testing!!
        - Previews for customer to make sure they're satisfied.
        - Integration - combining the components into a working system.
        - Deployment - send out teh binaries
      - Maintenance: repair, adapt, or enhance the system as needed.
    - Pretty much all software development models will contain some variation of
      these phases, but not necessarily in the same order, or linearly.
    - Stage called "Verification" is for formal reasoning and proofs of
      correction.

**** Waterfall Augmented With Iteration

     - Basically adds a whole bunch of transitions, to make maintenance more
       nice.

**** Waterfall  Advantages

     - It is disciplined, if you do it right.  Which is much better than just
       "build and fix."
     - If you're careful, the analysis+docs can prevent costly problems later.
     - Documentation typically fall out of date, so it takes a ton of effort to
       "be careful".

**** Waterfall Disadvantages

     - Difficult to convey dynamics of a system in a document.
     - Customers often can't tell what they want/don't want until they see it.
     - Requirements can also change for reasons other than shifting wants.
     - Sometimes you only really understand the requirements when you try to
       implement them.
     - Diffcult to assess your progress until some things are implemented.

*** Incentive Mismatch

    - Schrage claims requirements create perverse incentives for clients to:
      - Avoid rigorous thinking about cost, change, priorities, and risk.
      - Delegate hard design decisions to software developers.
    - It's easy and inexpensive to come up with many requirements.  They're
      "wishes".  It's easy.
    - Developers are rewarded for building to requirements.
    - Not rewarded for finding and removing requirements.
    - Schrage argues for quick prototypes based on few requirements.
      - "Never go to a client meeting without a prototype."
      - This fosters ongoing client interaction in development.
      - Clients are also less likely to reject their own work.
* 2015-08-24 Monday

  - I'm definitely going to switch to undergrad version of this class.
  - Quizzes - 60%
  - Project - 40%.
  - "Try" to get 8-10 quizzes.
  - Drop 2 lowest quizzes.

** Software Engineering

   Multiple meanings:

   - Application of engineering principles to software development.  Whatever
     those "engineering principles" are.
     - NATO stuff - many NATO countries had to do military software dev.
     - They held a conference to solve their problems by applying engineering
       practices.
     - Specification documents, etc.
   - Name of the software engineering practice.
   - Something else

***   Goals of Saftware Engineering

      To produce, as quickly and inexpensively as possible, software that is:

      - Easy to use
      - Reliable
      - Something
      - Straightforward to maintain, adapt, and enhance
      - Secure (lol)

      Generally most of software engineering is actually maintaining, adapting,
      and enhancing.  Not constructing.

*** Aspects of Software Engineering

**** Technical

       - Specification - creating a document that says exactly what a software or
         subsystem will do.
       - Design - taking a specification and coming up with a "design" that will
         do what the spec says.  Design is high level (not code), like UML, etc.
       - Programming - taking the design and putting it into code.
       - Inspection and Testing
       - Static & dynamic analysis
       - Debugging
       - Maintenance
       - Configuration management

**** Non-Technical

     - Project management
     - Psychology
       - cognitive, behavioral, organization
     - Law
       - contracts, liability, intellectual property

*** Software Complexity

    Primary issue for software dev: complexity:

    - problem complexity
    - design/implementation complexity
    - platform complexity

    Large systems are among the most complex things produced by humans.
    (e.g. Windows 8.1 - 80 million lines of code).

    - Complex systems are difficult to understand, produce, and maintain.
    - They rarely satisfy every need, and the needs often are a moving target.
    - They always contain "residual defects" that you don't know about.
    - Many SD projects are late and over budget.
      - Some just never complete.

*** Software Engineering Methodology

    - Broad collection of techniques and tools addressing each phase of software
      development.
    - Continually evolving
    - Specialized for subfields:
      - Web
      - Real-time
      - Health
    - Influential methods:
      - OO
      - TDD
      - Agile
